package actions

import (
	"fmt"
	"net/http"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop/v5"
	"github.com/gobuffalo/x/responder"
	"github.com/gofrs/uuid"
	"github.com/tcarreira/roaw2020/models"
	stravaclient "github.com/tcarreira/roaw2020/strava_client"
	"github.com/tcarreira/roaw2020/strava_client/swagger"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Activity)
// DB Table: Plural (activities)
// Resource: Plural (Activities)
// Path: Plural (/activities)
// View Template Folder: Plural (/templates/activities/)

// ActivitiesResource is the resource for the Activity model
type ActivitiesResource struct {
	buffalo.Resource
}

func (v ActivitiesResource) scope(c buffalo.Context) *pop.Query {
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		fmt.Printf("no transaction found")
		emptyTx := pop.Connection{}
		return emptyTx.Q()
	}

	cuid := c.Session().Get("current_user_id")

	// XXX: make this right
	param := c.Param("all")
	if param == "yes" {
		return tx.Q()
	}

	return tx.Where("user_id = ?", cuid)

}

// List gets all Activities. This function is mapped to the path
// GET /activities
func (v ActivitiesResource) List(c buffalo.Context) error {
	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := v.scope(c).PaginateFromParams(c.Params())

	activities := &models.Activities{}
	// Retrieve all Activities from the DB
	if err := q.All(activities); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// Add the paginator to the context so it can be used in the template.
		c.Set("pagination", q.Paginator)

		c.Set("activities", activities)
		return c.Render(http.StatusOK, r.HTML("/activities/index.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(activities))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(activities))
	}).Respond(c)
}

// Show gets the data for one Activity. This function is mapped to
// the path GET /activities/{activity_id}
func (v ActivitiesResource) Show(c buffalo.Context) error {
	// Allocate an empty Activity
	activity := &models.Activity{}

	// To find the Activity the parameter activity_id is used.
	if err := v.scope(c).Find(activity, c.Param("activity_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		c.Set("activity", activity)

		return c.Render(http.StatusOK, r.HTML("/activities/show.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(activity))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(activity))
	}).Respond(c)
}

// New renders the form for creating a new Activity.
// This function is mapped to the path GET /activities/new
func (v ActivitiesResource) New(c buffalo.Context) error {
	c.Set("activity", &models.Activity{})

	return c.Render(http.StatusOK, r.HTML("/activities/new.plush.html"))
}

// Create adds a Activity to the DB. This function is mapped to the
// path POST /activities
func (v ActivitiesResource) Create(c buffalo.Context) error {
	// Allocate an empty Activity
	activity := &models.Activity{}

	// Bind activity to the html form elements
	if err := c.Bind(activity); err != nil {
		return err
	}

	activity.UserID = c.Session().Get("current_user_id").(uuid.UUID)

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(activity)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the new.html template that the user can
			// correct the input.
			c.Set("activity", activity)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("/activities/new.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "activity.created.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/activities/%v", activity.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.JSON(activity))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.XML(activity))
	}).Respond(c)
}

// Edit renders a edit form for a Activity. This function is
// mapped to the path GET /activities/{activity_id}/edit
func (v ActivitiesResource) Edit(c buffalo.Context) error {
	// Allocate an empty Activity
	activity := &models.Activity{}

	if err := v.scope(c).Find(activity, c.Param("activity_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	c.Set("activity", activity)
	return c.Render(http.StatusOK, r.HTML("/activities/edit.plush.html"))
}

// Update changes a Activity in the DB. This function is mapped to
// the path PUT /activities/{activity_id}
func (v ActivitiesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Activity
	activity := &models.Activity{}

	if err := v.scope(c).Find(activity, c.Param("activity_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind Activity to the html form elements
	if err := c.Bind(activity); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(activity)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the edit.html template that the user can
			// correct the input.
			c.Set("activity", activity)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("/activities/edit.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "activity.updated.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/activities/%v", activity.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(activity))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(activity))
	}).Respond(c)
}

// Destroy deletes a Activity from the DB. This function is mapped
// to the path DELETE /activities/{activity_id}
func (v ActivitiesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Activity
	activity := &models.Activity{}

	// To find the Activity the parameter activity_id is used.
	if err := v.scope(c).Find(activity, c.Param("activity_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(activity); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a flash message
		c.Flash().Add("success", T.Translate(c, "activity.destroyed.success"))

		// Redirect to the index page
		return c.Redirect(http.StatusSeeOther, "/activities")
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(activity))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(activity))
	}).Respond(c)
}

// SyncLastActivitiesHandler will import all users' latest activities from the provider and populate the database
func SyncLastActivitiesHandler(c buffalo.Context) error {
	return syncAllUsersActivitiesHandler(c, stravaclient.FetchLatestActivities)
}

// SyncAllActivitiesHandler will import all users' all activities from the provider and populate the database
func SyncAllActivitiesHandler(c buffalo.Context) error {
	return syncAllUsersActivitiesHandler(c, stravaclient.FetchAllActivities)
}

func syncAllUsersActivitiesHandler(c buffalo.Context, syncFunction func(stravaAccessToken string) ([]swagger.SummaryActivity, error)) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return c.Error(http.StatusInternalServerError, fmt.Errorf("no transaction found"))
	}

	users := &models.Users{}
	// To find the User the parameter user_id is used.
	if err := tx.All(users); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	errorsSlice := []string{}
	for _, user := range *users {
		if err := user.SyncActivities(tx, syncFunction); err != nil {
			c.Logger().Error(err)
			c.Flash().Add("warning", err.Error())
			errorsSlice = append(errorsSlice, err.Error())
			continue
		}
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		return c.Redirect(http.StatusTemporaryRedirect, "/users")
	}).Wants("json", func(c buffalo.Context) error {
		if len(errorsSlice) > 0 {
			return c.Render(http.StatusInternalServerError, r.JSON(errorsSlice))
		}
		return c.Render(http.StatusOK, r.String("ok"))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.String("OK"))
	}).Respond(c)

}
